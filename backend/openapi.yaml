openapi: 3.0.0
info:
  title: Increase-productivity API
  version: 1.0.0
  description: API documentation increase-productivity site endpoints.

servers:
  - url: https://increase-productivity.abdrashitov-academy.ru/
    description: Production server
  - url: http://localhost:8080/
    description: local server

paths:
# authentication api
  /api/auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  example: Денис
                middle_name:
                  type: string
                  example: Николаевич
                last_name:
                  type: string
                  example: Вылетялов
                email:
                  type: string
                  format: email
                  example: viletyalov1212@gmail.com
                password:
                  type: string
                  format: password
                  example: passvdn1212
                password_confirmation:
                  type: string
                  format: password
                  example: passvdn1212
              required:
                - first_name
                - email
                - password
                - password_confirmation
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User successfully registered
                  user:
                    type: object
                    properties:
                      first_name:
                        type: string
                        example: Денис
                      middle_name:
                        type: string
                        example: Николаевич
                      last_name:
                        type: string
                        example: Вылетялов
                      role_id:
                        type: integer
                        example: 1
                      email:
                        type: string
                        example: viletyalov1212@gmail.com
                      updated_at:
                        type: string
                        example: 2024-07-21T06:58:17.000000Z
                      created_at:
                        type: string
                        example: 2024-07-21T06:58:17.000000Z
                      id:
                        type: integer
                        example: 1
                  access_token:
                    type: string
                    example: 123456789
                  token_type:
                    type: string
                    example: Bearer
                  expires_in:
                    type: integer
                    example: 3600
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: Log in a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: viletyalov1212@gmail.com
                password:
                  type: string
                  format: password
                  example: passvdn1212
              required:
                - email
                - password
      responses:
        "200":
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: 123456789
                  token_type:
                    type: string
                    example: Bearer
                  expires_in:
                    type: integer
                    example: 3600
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /api/auth/logout:
    post:
      tags:
        - Authentication
      summary: Log out the authenticated user
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  # Get User API
  /api/user/:
    summary: Operations about User
    get:
      tags:
        - User GET
      summary: All User Information
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: Success
        400:
          description: Incorrect input
        default:
          description: Success

# Companies API
  /api/companies:
    summary: Operations about companies
    get:
      tags:
        - Companies GET
      summary: Get all your companies
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: Success
        400:
          description: Incorrect input
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        default:
          description: Success
    post:
      tags:
        - Companies POST
      summary: Add a company
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/company"
      responses:
        "200":
          description: Company added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/company"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /api/companies/{company}:
    summary: Operations about Companies
    get:
      tags:
        - Companies GET
      summary: Get a company
      security:
        - bearerAuth: [ ]
      parameters:
        - name: company
          required: true
          in: path
          schema:
            type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/company'
        400:
          description: Incorrect input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        404:
          description: Company not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

    put:
      tags:
        - Companies PUT
      summary: Update a company
      security:
        - bearerAuth: [ ]
      parameters:
        - name: company
          required: true
          in: path
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/company"
      responses:
        "200":
          description: Company updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/company"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "404":
          description: Company not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

    delete:
      tags:
        - Companies DELETE
      summary: Delete a company
      security:
        - bearerAuth: [ ]
      parameters:
        - name: company
          required: true
          in: path
          schema:
            type: integer
      responses:
        200:
          description: Company deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        400:
          description: Incorrect input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        404:
          description: Company not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  # employees API
  /api/employees:
    summary: Operations about employees
    get:
      tags:
        - employees GET
      summary: Get all the employees
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Employee"
        400:
          description: Incorrect input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        default:
          description: Success
    post:
      tags:
        - employees POST
      summary: Add an employee
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreEmployeeRequest'
      responses:
        200:
          description: 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /api/employees/{employee}:
    summary: Operations about employees
    get:
      tags:
        - employees GET
      summary: Get an employee
      security:
        - bearerAuth: [ ]
      parameters:
        - name: employee
          required: true
          in: path
          schema:
            type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"
        400:
          description: Incorrect input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        default:
          description: Success
    put:
      tags:
        - employees PUT
      summary: Update an employee
      security:
        - bearerAuth: [ ]
      parameters:
        - name: employee
          required: true
          in: path
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEmployeeRequest'
      responses:
        200:
          description: 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
    delete:
      tags:
        - employees DELETE
      summary: Delete an employee
      security:
        - bearerAuth: [ ]
      parameters:
        - name: employee
          required: true
          in: path
          schema:
            type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        400:
          description: Incorrect input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        default:
          description: Success

#values api
  /api/values/:
    get:
      tags:
      - values GET
      summary: Get all values
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: A list of values
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Value'
    post:
      tags:
      - values POST
      summary: Add value
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreValueRequest'
      responses:
        "201":
          description: Value created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Value'
        "403":
          description: Maximum number of Value instances reached
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /api/values/{value}:
    get:
      tags:
        - values GET
      summary: Get a value
      security:
        - bearerAuth: [ ]
      parameters:
        - name: value
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: A single value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Value'
        "404":
          description: Value not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    put:
      tags:
        - values PUT
      summary: edit a value
      security:
        - bearerAuth: [ ]
      parameters:
        - name: value
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateValueRequest'
      responses:
        "200":
          description: Value updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Value'
        "404":
          description: Value not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    delete:
      tags:
      - values DELETE
      summary: Delete a value
      security:
        - bearerAuth: [ ]
      parameters:
        - name: value
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Value deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "404":
          description: Value not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /api/qualities:
    get:
      tags:
        - Qualities GET
      summary: List all qualities
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: A list of qualities
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Quality'
    post:
      tags:
        - Qualities POST
      summary: Create a new quality
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreQualityRequest'
      responses:
        "201":
          description: Quality created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quality'
        "403":
          description: Maximum number of Quality instances reached
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /api/qualities/{id}:
    get:
      tags:
        - Qualities GET
      summary: Get a single quality
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: A single quality
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quality'
        "404":
          description: Quality not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    put:
      tags:
        - Qualities PUT
      summary: Update an existing quality
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateQualityRequest'
      responses:
        "200":
          description: Quality updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quality'
        "404":
          description: Quality not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    delete:
      tags:
        - Qualities DELETE
      summary: Delete a quality
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Quality deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "404":
          description: Quality not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string



  # events API
  /api/events:
    summary: Operations about events
    get:
      tags:
        - Events GET
      summary: Get all the events
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: Success
        400:
          description: Incorrect input
        default:
          description: Success
    post:
      tags:
        - Events POST
      summary: Add an event
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/event'
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/event"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /api/events/{event_id}:
    summary: Operations about events
    get:
      tags:
        - Events GET
      summary: Get an event
      security:
        - bearerAuth: [ ]
      parameters:
        - name: event_id
          required: true
          in: path
          schema:
            type: integer
      responses:
        200:
          description: Success
        400:
          description: Incorrect input
        default:
          description: Success

    put:
      tags:
        - Events PUT
      summary: Update an event
      security:
        - bearerAuth: [ ]
      parameters:
        - name: event_id
          required: true
          in: path
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/event'
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/event"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
    delete:
      tags:
        - Events DELETE
      summary: Delete an event
      security:
        - bearerAuth: [ ]
      parameters:
        - name: event_id
          required: true
          in: path
          schema:
            type: integer
      responses:
        200:
          description: Success
        400:
          description: Incorrect input
        default:
          description: Success


    # Metrics API
  /api/metrics:
      summary: Operations about metrics
      get:
        tags:
          - Metrics GET
        summary: Get all the metrics
        security:
          - bearerAuth: [ ]
        responses:
          200:
            description: Success
          400:
            description: Incorrect input
          401:
            description: Unauthorized
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
          default:
            description: Success
      post:
        tags:
          - Metrics POST
        summary: Add a metric
        security:
          - bearerAuth: [ ]
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/metric"
        responses:
          "200":
            description: Metric added successfully
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/metric"
          "400":
            description: Bad request
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
          401:
            description: Unauthorized
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string

  /api/metrics/{metric}:
      put:
        tags:
          - Metrics PUT
        summary: Update a metric
        security:
          - bearerAuth: [ ]
        parameters:
          - name: metric
            required: true
            in: path
            schema:
              type: integer
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/metric"
        responses:
          "200":
            description: Company updated successfully
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/metric"
          "400":
            description: Bad request
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
          "404":
            description: Metric not found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
          401:
            description: Unauthorized
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string

      delete:
        tags:
          - Metrics DELETE
        summary: Delete a metric
        security:
          - bearerAuth: [ ]
        parameters:
          - name: metric
            required: true
            in: path
            schema:
              type: integer
        responses:
          200:
            description: Metric deleted successfully
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
          400:
            description: Incorrect input
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
          401:
            description: Unauthorized
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
          404:
            description: Metric not found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string


  # survey API
  /api/survey_histories:
    summary: Operations about survey_history
    get:
      tags:
        - Survey_history GET
      summary: Get statistic about company
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: Success
        400:
          description: Incorrect input
        default:
          description: Success
    post:
      tags:
        - Survey_history POST
      summary: Add an survey results
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/survey_history_input'
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/survey_history"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /api/survey_histories/{survey_id}:
    summary: Operations about survey_history
    get:
      tags:
        - Survey_history GET
      summary: Get the statistic of employee
      security:
        - bearerAuth: [ ]
      parameters:
        - name: survey_id
          required: true
          in: path
          schema:
            type: integer
      responses:
        200:
          description: Success
        400:
          description: Incorrect input
        default:
          description: Success

    put:
      tags:
        - Survey_history PUT
      summary: Update an survey results
      security:
        - bearerAuth: [ ]
      parameters:
        - name: survey_id
          required: true
          in: path
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/survey_history_put'
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/survey_history"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  # collective metrics API
  /api/collective_metrics:
    summary: Operations about collective metrics
    get:
      tags:
        - Collective metrics GET
      summary: Get all the collective metrics
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: Success
        400:
          description: Incorrect input
        default:
          description: Success
    post:
      tags:
        - Collective metrics POST
      summary: Add an absenteeism rate
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/absenteeism_rate_input'
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/survey_history_output"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  # value_qualities API
  /api/value_qualities:
    post:
      tags:
        - value_qualities POST
      summary: Add an value_qualities
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/value_qualities_post'
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/value_qualities_out"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /api/value_qualities/{employee_id}:
    summary: Operations about value_qualities
    get:
      tags:
        - value_qualities GET
      summary: Get the last employee qualities
      security:
        - bearerAuth: [ ]
      parameters:
        - name: employee_id
          required: true
          in: path
          schema:
            type: integer
      responses:
        200:
          description: Success
        400:
          description: Incorrect input
        default:
          description: Success

  # quality_values API
  /api/quality_values/:
    summary: Operations about quality_values
    get:
      tags:
        - quality_values GET
      summary: Get all the company quality_values
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: Success
        400:
          description: Incorrect input
        default:
          description: Success

  # Values Qualities Graphics API
  /api/company_values_qualities_graphics/:
    summary: Operations about Company Values Qualities Graphics
    get:
      tags:
        - Company Values Qualities Graphics GET
      summary: Get Company Values Qualities Graphics
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: Success
        400:
          description: Incorrect input
        default:
          description: Success


  /api/personal_values_qualities_graphics/{employee_id}:
    summary: Operations about Pesonal Values Qualities Graphics
    get:
      tags:
        - Pesonal Values Qualities Graphics GET
      summary: Get Pesonal Values Qualities Graphics
      security:
        - bearerAuth: [ ]
      parameters:
        - name: employee_id
          required: true
          in: path
          schema:
            type: integer
      responses:
        200:
          description: Success
        400:
          description: Incorrect input
        default:
          description: Success

  # Metrics Graphics API
  /api/company_metrics_graphics/:
    summary: Operations about Company Metrics Graphics
    get:
      tags:
        - Company Metrics Graphics GET
      summary: Get Company Metrics Graphics
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: Success
        400:
          description: Incorrect input
        default:
          description: Success

  /api/personal_metrics_graphics/{employee_id}:
    summary: Operations about Pesonal Metrics Graphics
    get:
      tags:
        - Pesonal Metrics Graphics GET
      summary: Get Pesonal Metrics Graphics
      security:
        - bearerAuth: [ ]
      parameters:
        - name: employee_id
          required: true
          in: path
          schema:
            type: integer
      responses:
        200:
          description: Success
        400:
          description: Incorrect input
        default:
          description: Success

  # Values Graphics API
  /api/company_values_graphics/:
    summary: Operations about Company Values Graphics
    get:
      tags:
        - Company Values Graphics GET
      summary: Get Company Values Graphics
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: Success
        400:
          description: Incorrect input
        default:
          description: Success

  /api/personal_values_graphics/{employee_id}:
    summary: Operations about Pesonal Values Graphics
    get:
      tags:
        - Pesonal Values Graphics GET
      summary: Get Pesonal Values Graphics
      security:
        - bearerAuth: [ ]
      parameters:
        - name: employee_id
          required: true
          in: path
          schema:
            type: integer
      responses:
        200:
          description: Success
        400:
          description: Incorrect input
        default:
          description: Success

  # Top Qualities Risk Graphics API
  /api/company_top_qualities_risk_graphics/:
    summary: Operations about Company Top Qualities Risk Graphics
    get:
      tags:
        - Company Top Qualities Risks GET
      summary: Get Company Top Qualities Risk Graphics
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: Success
        400:
          description: Incorrect input
        default:
          description: Success

  /api/personal_top_qualities_risk_graphics/{employee_id}:
    summary: Operations about Top Qualities Risk Graphics
    get:
      tags:
        - Pesonal Top Qualities Risks GET
      summary: Get Top Qualities Risk Graphics
      security:
        - bearerAuth: [ ]
      parameters:
        - name: employee_id
          required: true
          in: path
          schema:
            type: integer
      responses:
        200:
          description: Success
        400:
          description: Incorrect input
        default:
          description: Success

  # Notes API
  /api/notes:
    post:
      tags:
        - Note POST
      summary: Add an note
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotePost'
      responses:
        200:
          description: 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Note"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /api/notes/{employee_id}:
    summary: Operations about notes
    get:
      tags:
        - Notes GET
      summary: Get notes
      security:
        - bearerAuth: [ ]
      parameters:
        - name: employee_id
          required: true
          in: path
          schema:
            type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Note"
        400:
          description: Incorrect input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        default:
          description: Success

  /api/notes/{note_id}:
    put:
      tags:
        - Note PUT
      summary: Update an note
      security:
        - bearerAuth: [ ]
      parameters:
        - name: note_id
          required: true
          in: path
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NoteUpdate'
      responses:
        200:
          description: 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Note"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
    delete:
      tags:
        - Note DELETE
      summary: Delete an note
      security:
        - bearerAuth: [ ]
      parameters:
        - name: note_id
          required: true
          in: path
          schema:
            type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        400:
          description: Incorrect input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        default:
          description: Success

  # Files API
  /api/files:
    post:
      tags:
        - File POST
      summary: Add an File
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: file
                  format: binary
                  required : true
                employee_id:
                  type: integer
                  example: 1
                  required : true
      responses:
        200:
          description: 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/File"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /api/files/{employee_id}:
    summary: Operations about files
    get:
      tags:
        - Files GET
      summary: Get files
      security:
        - bearerAuth: [ ]
      parameters:
        - name: employee_id
          required: true
          in: path
          schema:
            type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/File"
        400:
          description: Incorrect input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        default:
          description: Success

  /api/files/{file_id}:
    delete:
      tags:
        - File DELETE
      summary: Delete an file
      security:
        - bearerAuth: [ ]
      parameters:
        - name: file_id
          required: true
          in: path
          schema:
            type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        400:
          description: Incorrect input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        default:
          description: Success

  # Risk Graphics API
  /api/risk_graphics/{employee_id}:
    summary: Operations about Risk Graphics
    get:
      tags:
        - Risks GET
      summary: Risk Graphics
      security:
        - bearerAuth: [ ]
      parameters:
        - name: employee_id
          required: true
          in: path
          schema:
            type: integer
      responses:
        200:
          description: Success
        400:
          description: Incorrect input
        default:
          description: Success

  # Company Raiting API
  /api/company_rating/:
    summary: Operations about Company Rating
    get:
      tags:
        - Company Rating GET
      summary: Company Rating
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: Success
        400:
          description: Incorrect input
        default:
          description: Success

  # Top 3 Risks Employees API
  /api/top_risks_employees/:
    summary: Operations about Top 3 Risks Employees
    get:
      tags:
        - Top 3 Risks Employees GET
      summary: Top 3 Risks Employees
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: Success
        400:
          description: Incorrect input
        default:
          description: Success

   # All Company Risks API
  /api/all_company_risks/:
    summary: Operations about All Company Risks
    get:
      tags:
        - All Company Risks GET
      summary: All Company Risks
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: Success
        400:
          description: Incorrect input
        default:
          description: Success

  # All Employee Risks API
  /api/all_employee_risks/{employee_id}:
    summary: Operations about All Employee Risks
    get:
      tags:
        - All Employee Risks GET
      summary: All Employee Risks
      security:
        - bearerAuth: [ ]
      parameters:
        - name: employee_id
          required: true
          in: path
          schema:
            type: integer
      responses:
        200:
          description: Success
        400:
          description: Incorrect input
        default:
          description: Success

  # Presets API
  /api/presets/:
    summary: Operations about Presets
    get:
      tags:
        - Presets GET
      summary: Presets
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: Success
        400:
          description: Incorrect input
        default:
          description: Success

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Value:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    StoreValueRequest:
        type: object
        properties:
          name:
            type: string
            required: true
          quality1:
            type: string
            required: true
          quality2:
            type: string
            required: false
          quality3:
            type: string
            required: false
          quality4:
            type: string
            required: false
          quality5:
            type: string
            required: false

    UpdateValueRequest:
        type: object
        properties:
          name:
            type: string
            required: true
          quality1:
            type: string
            required: true
          quality2:
            type: string
            required: false
          quality3:
            type: string
            required: false
          quality4:
            type: string
            required: false
          quality5:
            type: string
            required: false

    Quality:
      type: object
      properties:
        id:
          type: integer
        quality_name:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    StoreQualityRequest:
        type: object
        properties:
          name:
            type: string
            example: 'качество'
            required: true
          coefficient:
            type: float
            example: 1
            required: true
          risk_name:
            type: string
            example: 'риск качества'
            required: true
          description:
            type: string
            example: 'Описание качества'
            required: true

    UpdateQualityRequest:
        type: object
        properties:
          name:
            type: string
            example: 'качество'
            required: true
          coefficient:
            type: float
            example: 1
            required: true
          risk_name:
            type: string
            example: 'риск качества'
            required: true
          description:
            type: string
            example: 'Описание качества'
            required: true

    Employee:
      type: object
      properties:
        id:
          type: integer
          example: 1
        first_name:
          type: string
          example: "John"
        middle_name:
          type: string
          example: "Doe"
        last_name:
          type: string
          example: "Smith"
        birth_date:
          type: string
          format: date
          example: "2000-01-01"
        imgSrc:
          type: string
          example: "image_url"
        position:
          type: string
          example: "backend"
        work_experience:
          type: number
          format: float
          example: 1.5
        salary:
          type: number
          format: float
          example: 50000
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        balance:
          type: number
          format: float
          example: 0
        date_of_hiring:
          type: string
          format: date
          example: "2024-04-10"
        age_in_full_years:
          type: integer
          example: 23
        company_id:
          type: integer
          example: 1


    StoreEmployeeRequest:
      type: object
      properties:
        first_name:
         type: string
        middle_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          example: string1
        password_confirmation:
          type: string
          format: password
          example: string1
        imgSrc:
          type: string
          example: "image_url"
        salary:
          type: number
          format: float
          example: 50000
        birth_date:
          type: string
          format: date
          example: "2000-01-01"
        position:
          type: string
          example: "backend"
        status:
          type: string
          example: "working"
        date_of_hiring:
          type: string
          format: date
          example: "2024-04-10"
        work_experience:
          type: number
          format: float
          example: 1.5
        balance:
          type: number
          format: float
          example: 0


    UpdateEmployeeRequest:
      type: object
      properties:
        imgSrc:
          type: string
          example: "image_url"
        salary:
          type: number
          format: float
          example: 50000
        birth_date:
          type: string
          format: date
          example: "2000-01-01"
        position:
          type: string
          example: "backend"
        status:
          type: string
          example: "working"
        date_of_hiring:
          type: string
          format: date
          example: "2024-04-10"
        work_experience:
          type: number
          format: float
          example: 1.5
        balance:
          type: number
          format: float
          example: 0

    company:
      type: object
      properties:
        name:
          type: string
          example: Gold
        logoSrc:
          type: string
          example: 123.jpg
        currency_name:
          type: string
          example: Gold coin
        description:
          type: string
          example: Gold - Инновационная финтех-компания, предлагающая инвестиционные решения в драгоценные металлы и связанные с ними финансовые инструменты.

    event:
      type: object
      properties:
        name:
          type: string
          example: "Корпоратив"
        event_date:
          type: string
          format: date
          example: "2024-04-10"
        format:
          type: string
          example: "Пьянка"
        imgSrc:
          type: string
          example: "1234.jpg"
        reward:
          type: integer
          example: 25
        description:
          type: string
          example: "Организовать корпоратив бла бла бла..."

    metric:
      type: object
      properties:
        name:
          type: string
          example: "Оценка вовлеченности персонала"
        description:
          type: string
          example: Оценка вовлеченности персонала (метрика Gallup Q12)
        coefficient:
          type: number
          example: 1
        risk_name:
          type: string
          example: Риск саботажа работы

    survey_history_input:
      type: object
      properties:
        employee_id:
          type: integer
          example: 1
        metric_1_mark:
          type: integer
          example: 1
        metric_2_mark:
          type: integer
          example: 1
        metric_3_mark:
          type: integer
          example: 1
        survey_date:
          type: string
          format: date
          example: "2024-06-01"

    survey_history:
      type: object
      properties:
        id:
          type: integer
          example: 1
        employee_id:
          type: integer
          example: 1
        metric_1_mark:
          type: integer
          example: 1
        metric_2_mark:
          type: integer
          example: 1
        metric_3_mark:
          type: integer
          example: 1
        metric_1_risk:
          type: integer
          example: 100000
        metric_2_risk:
          type: integer
          example: 100000
        metric_3_risk:
          type: integer
          example: 100000
        risk_sum:
          type: integer
          example: 300000
        survey_date:
          type: string
          format: date
          example: "2024-06-02"

    survey_history_put:
      type: object
      properties:
        employee_id:
          type: integer
          example: 1
        metric_1_mark:
          type: integer
          example: 1
        metric_2_mark:
          type: integer
          example: 1
        metric_3_mark:
          type: integer
          example: 1
        survey_date:
          type: string
          format: date
          example: "2024-06-02"


    absenteeism_rate_input:
      type: object
      properties:
        coefficient:
          type: number
          format: float
          example: "0.2321"

    survey_history_output:
      type: object
      properties:
        id:
          type: integer
          example: 1
        company_id:
          type: ineger
          example: 1
        coefficient:
          type: number
          format: float
          example: "0.2321"

    value_qualities_post:
      type: object
      properties:
        value_id:
          type: integer
          example: 1
        employee_id:
          type: integer
          example: 1
        quality1:
          type: object
          properties:
            id:
              type: integer
              example: 1
            mark:
              type: integer
              example: 5
        quality2:
          type: object
          properties:
            id:
              type: integer
              example: 2
            mark:
              type: integer
              example: 5
        quality3:
          type: object
          properties:
            id:
              type: integer
              example: 3
            mark:
              type: integer
              example: 5
        quality4:
          type: object
          properties:
            id:
              type: integer
              example: 4
            mark:
              type: integer
              example: 5
        quality5:
          type: object
          properties:
            id:
              type: integer
              example: 5
            mark:
              type: integer
              example: 5

    value_qualities_out:
      type: string
      example: Marks added successfully

    Note:
      type: object
      properties:
        id:
          type: integer
          example: 1
        text:
          type: string
          example: note about my employee

    NotePost:
      type: object
      properties:
        text:
          type: string
          example: note about my employee
        employee_id:
          type: integer
          example: 1

    NoteUpdate:
      type: object
      properties:
        text:
          type: string
          example: note about my employee

    File:
      type: object
      properties:
        id:
          type: integer
          example: 1
        file_name:
          type: string
          example: "123"

