stages:
  # - linting
  - build
  - deploy
  - clear

.branch_rule: &branch_rule
  if: '$CI_COMMIT_BRANCH == "dev"'

.merge_request_event: &merge_request_event
  if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

# linting:
#   stage: linting
#   script:
#     - cp ./frontend/apps/hr/linting/Dockerfile Dockerfile
#     - cp ./frontend/apps/hr/linting/package_.json package_.json
#     - docker build -t test .
#   rules:
#     - <<: *branch_rule
#     - <<: *merge_request_event
#   tags:
#     - academy

build:
  stage: build
  rules:
    - <<: *branch_rule
    - <<: *merge_request_event
  tags:
    - academy
  script:
    - cp ./deploy/.env.example .env.deploy
    - cp ./deploy/docker-compose.deploy.yml docker-compose.deploy.yml
    - cp ./deploy/Dockerfile Dockerfile
    - docker compose -f docker-compose.deploy.yml --env-file .env.deploy build
  artifacts:
    paths:
      - .env.deploy
      - docker-compose.deploy.yml
      - Dockerfile

deploy:
  rules:
    - <<: *branch_rule
  stage: deploy
  tags:
    - academy
  script:
    - docker compose --env-file .env.deploy -f docker-compose.deploy.yml up -d --force-recreate --remove-orphans
    - docker compose --env-file .env.deploy -f docker-compose.deploy.yml exec app php artisan migrate --force

clear:
  rules:
    - <<: *branch_rule
    - <<: *merge_request_event
  stage: clear
  tags:
    - academy
  script:
    - docker system prune --all --force
